I am xxx from XJTLU University, majoring in xxx, currently a junior student. 

Allow me to use 3 words to describe me, quick-learning, self-discipline & easy-going. 

In the past few years, I worked hard academically, winning scholarship once, which academically was in the top 10% of all students. 

My primary programming language is python and recently, I have been learning nodeJS and review JAVA. Although having not been participated in ACM and my algorithm power is not strogn enougth, I am just start taking the CS61b from UCB to enhance the knowledge of algorithm and data structure.

And although I didn't have an internship, I did research project about the ML DL and practical course project about web programming in school as the CV stated

I'm extremely interested in xxx in your junior postion, and also appreciate the chance of this interview. 


--------------------
problem: 
一个cell包含多个信息，not atomic -> break into multiple columns


-------------------------
What is Normalization?
Normalization is a database design technique which organizes tables in a manner that 
reduces redundancy and dependency of data.

第一范式（1NF）是指数据库表的每一列，都是属性不可分的基本数据项，同一列中不能有多个值
Each table cell should contain a single value ——single valued
(Each record needs to be unique ——tuple unique, 否则就是大大的冗余了)

插入异常Insert anomaly：如果部分数据没有，没法插如——如学生没有，系就建不了
删除异常Delete anomaly：如果把学生清空了，系也被删了
(上面这俩是一类，"存在"问题)
修改异常Update anomaly： 修改一个重复的地方，其他对应的一起重复的也得修改——"效率"问题

第二范式（2NF）：非主属性完全依赖于主关键——可以通过拆分(partition)表+新建主键(可以Composite Key)
No Partial Dependency: No non-prime attribute is dependent on the proper subset of any candidate key
--FULL dependent on the candidate key

该主键可确定其他非主属性！ 这个确定又叫"该非主属性完全依赖于主键"

判定：成果表里，没有部分函数依赖于主键的，都是完全函数依赖于(自己表的)主键！

优势：
减少数据冗余
解决了修改异常

异常
插入异常：无法新建系——因为系不是field，没法加
删除异常：删除学生，系还是不在了

第三范式3NF：任何非主属性不可依赖于其它非主属性——消除非主属性对于码的传递函数依赖。
no transitive functional dependency of non-prime attribute on any key
判定：如果存在非主属性对于码的传递函数依赖，则不符合3NF的要求。

优势：消除了插入异常和删除异常！！


自此，做更新操作只需要单表操作！！
